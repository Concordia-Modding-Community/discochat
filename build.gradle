buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0.2'
group = 'ca.concordia.discochat' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'discochat'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    extraLibs
}

shadowJar {
    classifier = '1.16'
    configurations = [project.configurations.extraLibs]
    relocate 'okhttp3', 'ca.concordia.discochat.shadow.okhttp'
    relocate 'okio', 'ca.concordia.discochat.shadow.okio'
    relocate 'club.minnced', 'ca.concordia.discochat.shadow.club.minnced'
    relocate 'com.sun', 'ca.concordia.discochat.shadow.com.sun'
    relocate 'com.iwebpp', 'ca.concordia.discochat.shadow.com.iwebpp'
    relocate 'com.neovisionaries', 'ca.concordia.discochat.shadow.com.neovisionaries'
    relocate 'gnu', 'ca.concordia.discochat.shadow.gnu'
    relocate 'org.apache.commons.collections4', 'ca.concordia.discochat.shadow.org.apache.commons.collections4'
    relocate('org.apache.commons.lang3', 'ca.concordia.discochat.shadow.org.apache.commons.lang3'){
        exclude 'org.apache.commons.lang3.tuple.Pair' //Fix bug with forge
    }
    relocate 'org.json', 'ca.concordia.discochat.shadow.org.json'
    relocate 'org.intellij', 'ca.concordia.discochat.shadow.org.intellij'
    relocate 'org.jetbrains', 'ca.concordia.discochat.shadow.org.jetbrains'
    relocate 'tomp2p', 'ca.concordia.discochat.shadow.tomp2p'
    relocate 'com.fasterxml', 'ca.concordia.discochat.shadow.com.fasterxml'
    relocate 'dev.vankka', 'ca.concordia.discochat.shadow.dev.vankka'
    relocate 'net.kyori', 'ca.concordia.discochat.shadow.net.kyori'
    relocate 'org.checkerframework', 'ca.concordia.discochat.shadow.org.checkerframework'
    relocate 'com.moandjiezana', 'ca.concordia.discochat.shadow.com.moandjiezana'
    relocate 'ch.lambdaj', 'ca.concordia.discochat.shadow.ch.lambdaj'
    relocate 'emoji4j', 'ca.concordia.discochat.shadow.emoji4j'
    relocate 'javax.annotation', 'ca.concordia.discochat.shadow.javax.annotation'
    relocate 'net.sf', 'ca.concordia.discochat.shadow.net.sf'
    relocate 'org.hamcrest', 'ca.concordia.discochat.shadow.org.hamcrest'
    relocate 'org.objenesis', 'ca.concordia.discochat.shadow.org.objenesis'
    exclude 'org/apache/commons/lang3/tuple/Pair.class' //Fix conflict with forge
}

reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

artifacts {
    archives tasks.shadowJar
}

repositories {
    jcenter()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.4'

    extraLibs 'net.dv8tion:JDA:4.2.0_224'

    extraLibs project(':b4dis')

    extraLibs project(':jddown')

    testImplementation 'junit:junit:4.13'

    testImplementation 'org.mockito:mockito-inline:3.4.0'

    configurations.compile.extendsFrom(configurations.extraLibs)
}

test {
    useJUnit()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "discochat",
            "Specification-Vendor": "concordia",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"concordia",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.extraLibs.findAll { !it.name.endsWith('pom') }.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}